"use strict";

/**
 * Geniled KP Generator ‚Äì UI (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * ---------------------------------------------------------------
 * ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ü–µ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 * ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * ‚úÖ –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * ‚úÖ Debounced resize handler
 * ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ë–∏—Ç—Ä–∏–∫—Å + —Å–µ–º–∞—Ñ–æ—Ä (–∫—Ä–∞—Å–Ω–∞—è/–∑–µ–ª—ë–Ω–∞—è –∏–∫–æ–Ω–∫–∞)
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ò–¢–û–ì–û
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è render() —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
 * ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: Drag-and-drop –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
 */

let __isRendering = false;
let globalClickHandlerInitialized = false;

// üîπ –ö—ç—à —Ç–∏–ø–æ–≤ —Ü–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let priceTypesCache = new Map();
let lastCacheUpdate = 0;
const CACHE_DURATION = 5000; // 5 —Å–µ–∫—É–Ω–¥

// üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isMobile() {
    return (window.innerWidth || document.documentElement.clientWidth) <= 900;
}

/* === –£—Ç–∏–ª–∏—Ç—ã === */
function escapeHtml(text) {
    if (text === null || text === undefined) return "";
    const div = document.createElement("div");
    div.textContent = String(text);
    return div.innerHTML;
}

if (typeof window.money !== "function") {
    window.money = function money(value, currency = "RUB") {
        const num = Number(value) || 0;
        const parts = num.toFixed(2).split(".");
        const intPart = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, " ");
        const frac = parts[1];
        const suffix = currency === "RUB" ? "‚ÇΩ" : currency;
        return `${intPart},${frac} ${suffix}`;
    };
}

/* === ‚úÖ –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ò–¢–û–ì–û === */
function updateMobileSticky() {
    console.log('üîÑ updateMobileSticky –≤—ã–∑–≤–∞–Ω–∞');

    const block = document.getElementById('mobileTotalBlock');
    const totalEl = document.getElementById('mobileTotalAmount');

    if (!block || !totalEl) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã mobileTotalBlock –∏–ª–∏ mobileTotalAmount –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }

    const productsArray = (typeof products !== 'undefined') ? products : [];
    const hasRows = Array.isArray(productsArray) && productsArray.length > 0;

    if (hasRows) {
        const total = productsArray.reduce((sum, p) => {
            const price = Number(p.price) || 0;
            const qty = Number(p.quantity) || 1;
            return sum + (price * qty);
        }, 0);

        const currency = productsArray[0]?.currency || 'RUB';
        const formattedTotal = typeof money === "function"
            ? money(total, currency)
            : `${total} ${currency}`;

        totalEl.textContent = formattedTotal;
        block.classList.add('has-products');
        console.log('‚úÖ –ë–ª–æ–∫ –ø–æ–∫–∞–∑–∞–Ω. –¢–µ–∫—Å—Ç:', formattedTotal);
    } else {
        block.classList.remove('has-products');
        console.log('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –±–ª–æ–∫ —Å–∫—Ä—ã—Ç');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.updateMobileSticky = updateMobileSticky;

/* === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ü–µ–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º === */
async function getProductPriceTypes(productId) {
    const now = Date.now();

    if (priceTypesCache.has(productId) && now - lastCacheUpdate < CACHE_DURATION) {
        return priceTypesCache.get(productId);
    }

    try {
        const res = await post("get_available_price_types", {
            product_ids: JSON.stringify([productId]),
            mode: "all",
        });

        if (res?.success && Array.isArray(res.types)) {
            priceTypesCache.set(productId, res.types);
            lastCacheUpdate = now;
            return res.types;
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞", productId, err);
    }

    return [];
}

/* === –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ === */
function clearPriceTypesCache() {
    priceTypesCache.clear();
    lastCacheUpdate = 0;
}

/* === –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —Ü–µ–Ω === */
async function preloadPriceTypes(productIds) {
    const uniqueIds = [...new Set(productIds)];
    const uncachedIds = uniqueIds.filter((id) => !priceTypesCache.has(id));
    if (uncachedIds.length === 0) return;

    try {
        const res = await post("get_available_price_types", {
            product_ids: JSON.stringify(uncachedIds),
            mode: "any",
        });

        if (res?.success && Array.isArray(res.types)) {
            uncachedIds.forEach((id) => {
                priceTypesCache.set(id, res.types);
            });
            lastCacheUpdate = Date.now();
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —Ü–µ–Ω", err);
    }
}

/* === ‚úÖ –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† –¢–ê–ë–õ–ò–¶–´ (–ò–°–ü–†–ê–í–õ–ï–ù) === */
async function render() {
    if (__isRendering) return;
    __isRendering = true;

    try {
        const tbody = document.getElementById("tbody");
        const totalCell = document.getElementById("totalCell");
        const kpWrap = document.getElementById("kpWrap");

        if (!tbody || !kpWrap) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã tbody –∏–ª–∏ kpWrap –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return;
        }

        if (products.length === 0) {
            kpWrap.classList.remove('has-products');
            kpWrap.style.display = "none";
            clearPriceTypesCache();

            console.log('üìû –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–∑—ã–≤–∞–µ–º updateMobileSticky()');
            updateMobileSticky();
            return;
        }

        kpWrap.classList.add('has-products');
        kpWrap.style.display = "block";

        // ‚ö° –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —Ü–µ–Ω
        const productIds = products.map((p) => p.id).filter(Boolean);
        if (productIds.length > 0) {
            await preloadPriceTypes(productIds);
        }

        let html = "";
        let total = 0;
        const manualRows = [];
        const mobile = isMobile();

        for (let i = 0; i < products.length; i++) {
            const p = products[i];
            const qty = Number(p.quantity) || 1;
            const price = Number(p.price) || 0;
            const sum = qty * price;
            total += sum;

            const basePrice = Number(p.base_price ?? p.mic_price ?? 0);
            const discount = p.discount_percent ?? (basePrice > 0 ? (((basePrice - price) / basePrice) * 100).toFixed(2) : 0);

            if (p.manual_price) manualRows.push(`#${i + 1} (${p.article || p.id})`);

            const imageHtml = p.image
                ? `<img src="${escapeHtml(p.image)}" alt="${escapeHtml(p.name)}" ${mobile ? 'loading="lazy"' : ""}>`
                : '<div class="product-image-placeholder">üì¶</div>';

            const props = Array.isArray(p.props) ? p.props : [];
            const propsHtml =
                props.length > 0
                    ? `<div class="param-block">
              ${props
                        .map(
                            (pr) => `
                <div class="param-row">
                  <span class="param-label">${escapeHtml(pr.name)}:</span>
                  <span class="param-value">${escapeHtml(pr.value)}</span>
                </div>`
                        )
                        .join("")}
           </div>`
                    : "";

            const nameHtml = `<a href="${escapeHtml(p.url || "#")}" target="_blank" class="link-to-product">${escapeHtml(p.name)}</a>`;

            const productPriceTypes = await getProductPriceTypes(p.id);

            const optionsHtml = productPriceTypes
                .map((opt) => {
                    const selected = Number(opt.id) === Number(p.price_type_id) ? "selected" : "";
                    return `<option value="${opt.id}" ${selected}>${escapeHtml(opt.name)}</option>`;
                })
                .join("");

            const selectClass = mobile ? "price-type-select mobile-native" : "price-type-select";

            const priceSelectHtml = `
        <select class="${selectClass}" data-row-id="${p.rowId}"
                onchange="changePriceType(${p.rowId}, this.value)">
          ${optionsHtml || '<option value="">–¢–∏–ø —Ü–µ–Ω—ã</option>'}
        </select>`;

            html += `
      <tr>
        <td data-label="‚Ññ">${i + 1}</td>
        <td data-label="–§–æ—Ç–æ">${imageHtml}</td>
        <td data-label="–ê—Ä—Ç–∏–∫—É–ª">${escapeHtml(p.article)}</td>
        <td data-label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ / –ü–∞—Ä–∞–º–µ—Ç—Ä—ã">
          <div class="name-wrap">${nameHtml}${propsHtml}</div>
        </td>
        <td data-label="–ï–¥.">${escapeHtml(p.measure || "—à—Ç")}</td>
        <td data-label="–ö–æ–ª-–≤–æ">
${mobile ? `
  <!-- –ú–û–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: [‚àí] [input] [+] –≤ —Ä—è–¥ -->
  <div class="qty-wrapper">
    <button class="qty-btn qty-btn-minus" onclick="changeQuantity(${p.rowId}, ${Math.max(1, qty - 1)})" title="–£–º–µ–Ω—å—à–∏—Ç—å">‚àí</button>
    <input type="number" class="qty-input" value="${qty}" min="1"
           onchange="changeQuantity(${p.rowId}, this.value)">
    <button class="qty-btn qty-btn-plus" onclick="changeQuantity(${p.rowId}, ${qty + 1})" title="–£–≤–µ–ª–∏—á–∏—Ç—å">+</button>
  </div>
` : `
          <div class="qty-wrapper-desktop">
            <button class="qty-btn qty-btn-minus" onclick="changeQuantity(${p.rowId}, ${Math.max(1, qty - 1)})" title="–£–º–µ–Ω—å—à–∏—Ç—å">‚àí</button>
            <input type="number" class="qty-input" value="${qty}" min="1"
                   onchange="changeQuantity(${p.rowId}, this.value)">
            <button class="qty-btn qty-btn-plus" onclick="changeQuantity(${p.rowId}, ${qty + 1})" title="–£–≤–µ–ª–∏—á–∏—Ç—å">+</button>
          </div>
          `}
        </td>
        <td data-label="–¶–µ–Ω–∞">
          <div class="price-wrapper">
            <input type="number" class="price-input" value="${price.toFixed(2)}" min="0" step="0.01"
                   onchange="changePrice(${p.rowId}, this.value)">
            ${p.manual_price ? `<button class="btn-reset" onclick="resetPrice(${p.rowId})" title="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –ú–ò–¶">‚Üª</button>` : ""}
          </div>
          ${priceSelectHtml}
        </td>
        <td data-label="–°–∫–∏–¥–∫–∞, %" class="discount-cell ${Number(discount) > 0 ? "has-discount" : ""}">
          <div class="input-affix">
            <input type="number" class="discount-input" value="${discount}" min="0" max="99" step="0.1"
                   onchange="changeDiscount(${p.rowId}, this.value)">
            <span class="affix">%</span>
          </div>
        </td>
        <td data-label="–°—É–º–º–∞" class="sum-cell">${money(sum, p.currency)}</td>
        <td data-label="–£–¥–∞–ª–µ–Ω–∏–µ">
          <span class="delete-icon" onclick="removeProduct(${p.rowId})" tabindex="0" role="button" aria-label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä">
            <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
            </svg>
          </span>
        </td>
      </tr>`;
        }

        tbody.innerHTML = html;

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π –ò–¢–û–ì–û –≤ tfoot
        if (totalCell) {
            totalCell.textContent = money(total, products[0]?.currency || "RUB");
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ü–†–ï–ú–ò–£–ú –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π –±–ª–æ–∫
        const desktopTotalAmount = document.getElementById('desktopTotalAmount');
        if (desktopTotalAmount) {
            desktopTotalAmount.textContent = money(total, products[0]?.currency || "RUB");
            console.log('‚úÖ Desktop total updated:', money(total, products[0]?.currency || "RUB"));
        }

        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –±–ª–æ–∫ –ò–¢–û–ì–û –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
        console.log('üìû –í—ã–∑—ã–≤–∞–µ–º updateMobileSticky() –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã');
        updateMobileSticky();

        if (!mobile) {
            initCustomSelects();

            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop
            if (typeof initDragDrop === 'function') {
                setTimeout(initDragDrop, 150);
            }
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ render():', error);
    } finally {
        __isRendering = false;
    }
}

// ‚úÖ –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–û
window.render = render;

/* === –ë–∞—Ç—á-—Ä–µ–Ω–¥–µ—Ä: –µ—Å–ª–∏ –µ—Å—Ç—å PriceMath.schedule ‚Äî —Ä–∏—Å—É–µ–º –≤ –æ–¥–∏–Ω –∫–∞–¥—Ä === */
function requestRender() {
    if (window.PriceMath && typeof PriceMath.schedule === 'function') {
        PriceMath.schedule(render);
    } else {
        render();
    }
}
window.requestRender = requestRender;

/* === –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–µ–ª–µ–∫—Ç—ã === */
function initCustomSelects() {
    const selects = document.querySelectorAll(".price-type-select:not(.mobile-native)");

    selects.forEach((select) => {
        if (select.parentElement?.classList.contains("custom-select")) return;

        const wrapper = document.createElement("div");
        wrapper.className = "custom-select";

        const button = document.createElement("button");
        button.className = "custom-select__button";
        button.type = "button";
        button.setAttribute("aria-haspopup", "listbox");
        button.setAttribute("aria-expanded", "false");
        button.textContent =
            select.options[select.selectedIndex]?.text || "–í—ã–±–µ—Ä–∏—Ç–µ";

        const list = document.createElement("div");
        list.className = "custom-select__list";
        list.setAttribute("role", "listbox");

        Array.from(select.options).forEach((option) => {
            const item = document.createElement("div");
            item.className = "custom-select__item";
            item.setAttribute("role", "option");
            item.textContent = option.text;
            item.dataset.value = option.value;
            if (option.selected) item.setAttribute("aria-selected", "true");

            item.addEventListener("click", (e) => {
                e.stopPropagation();
                select.value = option.value;
                select.dispatchEvent(new Event("change", { bubbles: true }));
                button.textContent = option.text;
                list.querySelectorAll(".custom-select__item").forEach((i) => i.removeAttribute("aria-selected"));
                item.setAttribute("aria-selected", "true");
                wrapper.classList.remove("open");
                button.setAttribute("aria-expanded", "false");
            });

            list.appendChild(item);
        });

        button.addEventListener("click", (e) => {
            e.stopPropagation();
            const isOpen = wrapper.classList.contains("open");
            document.querySelectorAll(".custom-select.open").forEach((s) => {
                s.classList.remove("open");
                s.querySelector(".custom-select__button")?.setAttribute("aria-expanded", "false");
            });
            wrapper.classList.toggle("open");
            button.setAttribute("aria-expanded", (!isOpen).toString());
            if (!isOpen) positionDropdown(wrapper, button, list);
        });

        button.addEventListener("keydown", (e) => {
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                button.click();
            }
        });

        select.classList.add("custom-select__native");
        select.style.display = "none";

        select.parentNode.insertBefore(wrapper, select);
        wrapper.appendChild(button);
        wrapper.appendChild(list);
        wrapper.appendChild(select);
    });

    if (!globalClickHandlerInitialized) {
        document.addEventListener("click", (e) => {
            if (!e.target.closest(".custom-select")) {
                document.querySelectorAll(".custom-select.open").forEach((s) => {
                    s.classList.remove("open");
                    s.querySelector(".custom-select__button")?.setAttribute("aria-expanded", "false");
                });
            }
        });
        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape") {
                document.querySelectorAll(".custom-select.open").forEach((s) => {
                    s.classList.remove("open");
                    s.querySelector(".custom-select__button")?.setAttribute("aria-expanded", "false");
                });
            }
        });
        globalClickHandlerInitialized = true;
    }
}

/* === –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—à–∫–∏ === */
function positionDropdown(wrapper, button, list) {
    const r = button.getBoundingClientRect();
    const vh = window.innerHeight;
    const spaceBelow = vh - r.bottom;
    const dropdownHeight = 260;

    const openDown = spaceBelow > dropdownHeight || spaceBelow > r.top;
    if (openDown) {
        list.style.top = `${r.bottom + 6}px`;
        list.style.bottom = "auto";
    } else {
        list.style.bottom = `${vh - r.top + 6}px`;
        list.style.top = "auto";
    }
    list.style.left = `${r.left}px`;
    list.style.minWidth = `${r.width}px`;
    list.style.width = "auto";
    list.style.position = "fixed";
}

/* === Debounced resize handler === */
let __resizeStickyTimer;
let __lastWidth = window.innerWidth;

window.addEventListener("resize", () => {
    clearTimeout(__resizeStickyTimer);
    __resizeStickyTimer = setTimeout(() => {
        const currentWidth = window.innerWidth;

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –±–ª–æ–∫ –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
        console.log('üìû –†–µ—Å–∞–π–∑ –æ–∫–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º updateMobileSticky()');
        updateMobileSticky();

        const wasDesktop = __lastWidth > 680;
        const isDesktop = currentWidth > 680;

        if (wasDesktop !== isDesktop && products.length > 0) {
            console.log("üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ desktop/mobile —Ä–µ–∂–∏–º–∞, –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä (batched)...");
            clearPriceTypesCache();
            requestRender(); // üî∏ –±–∞—Ç—á-—Ä–µ–Ω–¥–µ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ render()
        }

        __lastWidth = currentWidth;
    }, 250);
});

/* === –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö === */
if (typeof window !== "undefined") {
    window.render = render;
    window.clearPriceTypesCache = clearPriceTypesCache;
    window.isMobile = isMobile;
    window.updateMobileSticky = updateMobileSticky;
}

/* =========================
   –ë–ò–¢–†–ò–ö–°-–ü–†–û–§–ò–õ–¨ + –°–ï–ú–ê–§–û–†
   ========================= */

window.setBitrixProfileBadge = function(isUpToDate){
    const btn = document.querySelector('.btn-bitrix-profile');
    if (!btn) {
        console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ .btn-bitrix-profile –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    btn.classList.remove('state-fresh','state-stale');
    btn.classList.add(isUpToDate ? 'state-fresh' : 'state-stale');
    console.log(isUpToDate ? 'üü¢ –ü—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç—É–∞–ª–µ–Ω' : 'üî¥ –ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞—Ä–µ–ª');
};

async function safePost(action, payload = {}) {
    try {
        const res = await post(action, payload);
        if (typeof res !== "object") throw new Error("–û—Ç–≤–µ—Ç –Ω–µ JSON");
        return res;
    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ POST (${action}):`, e);
        if (typeof window.toast === "function") toast("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É", true);
        return { success: false, error: "NETWORK_ERROR" };
    }
}

window.loadFromBitrixProfile = async function () {
    const btn = document.querySelector('.btn-bitrix-profile');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (btn) {
        btn.disabled = true;
        btn.classList.add('loading');
        console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ë–∏—Ç—Ä–∏–∫—Å...');
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–Ω–æ–ø–∫–∏
    if (btn && btn.dataset && (btn.dataset.managerName || btn.dataset.managerEmail || btn.dataset.managerPhone || btn.dataset.managerCompany)) {
        const d = btn.dataset;
        const set = (id, v) => {
            const el = document.getElementById(id);
            if (el && v) el.value = v;
        };
        set('managerName',    (d.managerName || '').trim());
        set('managerEmail',   (d.managerEmail || '').trim());
        set('managerPhone',   (d.managerPhone || '').trim());
        set('managerCompany', (d.managerCompany || '').trim());
    }

    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const res = await safePost("get_bitrix_profile", {});

    // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (btn) {
        btn.disabled = false;
        btn.classList.remove('loading');
    }

    if (!res.success) {
        if (typeof window.toast === "function") {
            toast(res.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ë–∏—Ç—Ä–∏–∫—Å", true);
        }
        setBitrixProfileBadge(false);
        return;
    }

    const d = res.data || {};
    const setFieldValue = (id, val) => {
        const el = document.getElementById(id);
        if (el) el.value = val || "";
    };

    setFieldValue("managerName", d.manager_name);
    setFieldValue("managerPosition", d.manager_position || "");
    setFieldValue("managerPhone", d.manager_phone);
    setFieldValue("managerEmail", d.manager_email);
    setFieldValue("managerCompany", d.manager_company);

    window.currentProfileId = 0;
    const select = document.getElementById("profileSelect");
    if (select) select.value = 0;

    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–µ–ª—ë–Ω—É—é –∏–∫–æ–Ω–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    setBitrixProfileBadge(true);

    if (typeof window.toast === "function") {
        toast("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ë–∏—Ç—Ä–∏–∫—Å");
    }
};

/* =========================
   –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
   ========================= */
document.addEventListener('DOMContentLoaded', () => {
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏"
    setBitrixProfileBadge(false);
    console.log('üî¥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞—Ä–µ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
    // loadFromBitrixProfile();
});